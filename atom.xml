<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">

	<title>truveris.github.io</title>
	<subtitle>Truveris engineering blog</subtitle>
	<link href="https://truveris.github.io/atom.xml" rel="self" />
	<link href="https://truveris.github.io/" />
	<id>urn:uuid:60a76c80-d399-11d9-b91C-0003939e0af6</id>
	<updated>2017-09-07T13:45:00</updated>

	<entry>
		<title>Request Signature Authentication for IVRs Built with Python</title>
		<link href="https://truveris.github.io/articles/twilio-demo-pyramid-auth/" />
		<id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
		<updated>2017-09-07T13:45:00</updated>
		<summary>Demo of Twilio auth with Pyramid</summary>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				For many APIs it is desirable to authenticate requests made to an endpoint. For an interactive voice response (IVR) system API which returns TwiML, the only entity that should likely be allowed access in production is Twilio. This post will cover implementation of request signature validation in a Python IVR web application that uses the Pyramid web framework.

			</div>
		</content>
		<author>
			<name>Patrick Yevsukov</name>
			<email>hello@patrick.gg</email>
		</author>
	</entry>
	<entry>
		<title>Subresource Integrity</title>
		<link href="https://truveris.github.io/articles/subresource-integrity/" />
		<id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
		<updated>2016-07-16T06:58:00</updated>
		<summary>Security on the web</summary>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				Subresource Integrity (SRI for short) is a technique that allows you to ensure that your assets are being served unaltered.

			</div>
		</content>
		<author>
			<name>Ryan Kelly</name>
			<email>rkelly@truveris.com</email>
		</author>
	</entry>
	<entry>
		<title>Jimmy</title>
		<link href="https://truveris.github.io/articles/jimmy/" />
		<id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
		<updated>2016-07-11T10:10:00</updated>
		<summary>Jimmy, Jimmy-proofing</summary>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				Jimmy is a bit of the cultural genome of Truveris.

			</div>
		</content>
		<author>
			<name>Ryan Kelly</name>
			<email>rkelly@truveris.com</email>
		</author>
	</entry>
	<entry>
		<title>Logging</title>
		<link href="https://truveris.github.io/articles/logging/" />
		<id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
		<updated>2016-07-01T22:04:00</updated>
		<summary>logging how-to</summary>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				ðŸŽ¶They roll down stairs and travel in pairs and over your devops dogðŸŽ¶

			</div>
		</content>
		<author>
			<name>Ryan Kelly</name>
			<email>rkelly@truveris.com</email>
		</author>
	</entry>
	<entry>
		<title>At PyCon I learned</title>
		<link href="https://truveris.github.io/articles/pycon-2016/" />
		<id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
		<updated>2016-06-27T12:10:00</updated>
		<summary>PyCon 2016 conference and graceful degradation when services fail</summary>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				The failure of networks and services our systems depend on is inevitable. How do we deal with these situations?

			</div>
		</content>
		<author>
			<name>Kaisa Filppula</name>
			<email>kfilppula@truveris.com</email>
		</author>
	</entry>
	<entry>
		<title>Android Data Binding In Practice</title>
		<link href="https://truveris.github.io/articles/android-advanced-data-binding/" />
		<id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
		<updated>2016-06-24T12:15:00</updated>
		<summary>Walkthrough of implementing new feature using Android's Data Binding features</summary>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				Inspired by a Google I/O talk, I decided to leverage some of Android's Data
Binding capabilities when building out a new feature in our OneRx application.
Result: I loved it.

			</div>
		</content>
		<author>
			<name>Matthew Horst</name>
			<email>mhorst@truveris.com</email>
		</author>
	</entry>
	<entry>
		<title>My Tests Are Slow</title>
		<link href="https://truveris.github.io/articles/my-tests-are-slow/" />
		<id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
		<updated>2016-06-20T21:25:00</updated>
		<summary>PostgreSQL optimizations and debugging</summary>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				The other day a coworker was remarking that their test suite ran much more
slowly than mine. Much more slowly than the build server, too.

			</div>
		</content>
		<author>
			<name>Ryan Kelly</name>
			<email>rkelly@truveris.com</email>
		</author>
	</entry>
	<entry>
		<title>Break On Attribute Change</title>
		<link href="https://truveris.github.io/articles/break-on-attribute-change/" />
		<id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
		<updated>2016-06-13T22:32:00</updated>
		<summary>JavaScript debugging feature</summary>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				Today I discovered a neat feature available in both Firefox and Chrome: break
on attribute change. This allows us to break when some code changes a DOM
element attribute.

			</div>
		</content>
		<author>
			<name>Ryan Kelly</name>
			<email>rkelly@truveris.com</email>
		</author>
	</entry>
	<entry>
		<title>Locust</title>
		<link href="https://truveris.github.io/articles/locust/" />
		<id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
		<updated>2015-02-02T12:00:00</updated>
		<summary>Introduction to testing web applications using locust; replacing users with small scripts.</summary>
		<content type="xhtml">
			<div xmlns="http://www.w3.org/1999/xhtml">
				In my search for a scalable, session based, highly configurable load testing
tool, I happened upon Locust.  I was Looking for something between the lightweight
but pure throughput testing of <em>ab</em> and full on virtual machine scripted
browser transactions.  Locust looked to fit the bill, and so far has done
everything I have needed, both for quasi-functional testing as well as
benchmarking API endpoints.  A great departure from the normal heavyweight
<em>The Grinder</em>, Locust provided a lightweight, yet totally functional
approach to user emulation testing.

			</div>
		</content>
		<author>
			<name>Dan Lloyd</name>
			<email>dlloyd@truveris.com</email>
		</author>
	</entry>
</feed>
